{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      })\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    })]\n  });\n};\n\nexport const getStaticPaths = async () => {\n  // Fetch data from Mongo\n  const client = await MongoClient.connect(`mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // Get all the meetups in the db, but bring ONLY the _id's in an array\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // If fallback is false, then any paths not returned by getStaticPaths\n    // will result in a 404 page.\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    // ],\n\n  };\n};\nexport const getStaticProps = async context => {\n  // Get id from route within the context.params\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); // fetch data for a single meetup\n\n  const client = await MongoClient.connect(`mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // Call .find().toArray() on meetupsCollection to get all meetups\n  // within an array\n\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(\"meetup: \", meetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        image: meetup.image,\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description\n      }\n    }\n  }; // return {\n  //   props: {\n  //     meetupData: {\n  //       image:\n  //         \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  //       id: meetupId,\n  //       title: \"First Meetup\",\n  //       address: \"Some Street 5, Some City\",\n  //       description: \"This is a first meetup\",\n  //     },\n  //   },\n  // };\n};\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}