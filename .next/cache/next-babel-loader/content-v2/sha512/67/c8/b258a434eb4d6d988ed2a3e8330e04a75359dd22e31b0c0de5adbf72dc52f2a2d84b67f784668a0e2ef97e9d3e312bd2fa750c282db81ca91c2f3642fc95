{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jabrahamdev/Documents/Cursos/React/Academind/Projects/sec23_nextJsMeetups/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  // Fetch data from Mongo\n  const client = await MongoClient.connect(`mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // Get all the meetups in the db, but bring ONLY the _id's in an array\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // If fallback is false, then any paths not returned by getStaticPaths\n    // will result in a 404 page.\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    // ],\n\n  };\n};\nexport const getStaticProps = async context => {\n  // Get id from route within the context.params\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); // fetch data for a single meetup\n\n  const client = await MongoClient.connect(`mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // Call .find().toArray() on meetupsCollection to get all meetups\n  // within an array\n\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(\"meetup: \", meetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        image: meetup.image,\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description\n      }\n    }\n  }; // return {\n  //   props: {\n  //     meetupData: {\n  //       image:\n  //         \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  //       id: meetupId,\n  //       title: \"First Meetup\",\n  //       address: \"Some Street 5, Some City\",\n  //       description: \"This is a first meetup\",\n  //     },\n  //   },\n  // };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/jabrahamdev/Documents/Cursos/React/Academind/Projects/sec23_nextJsMeetups/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","Fragment","Head","MeetupDetails","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","findOne","id"],"mappings":"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","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head'\n\nconst MeetupDetails = (props) => {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n};\n\nexport const getStaticPaths = async () => {\n  // Fetch data from Mongo\n  const client = await MongoClient.connect(\n    `mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  // Get all the meetups in the db, but bring ONLY the _id's in an array\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    // If fallback is false, then any paths not returned by getStaticPaths\n    // will result in a 404 page.\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    // ],\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // Get id from route within the context.params\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  // fetch data for a single meetup\n  const client = await MongoClient.connect(\n    `mongodb+srv://admin-jabraham:dunkel1mongo@cluster0.e4adw.mongodb.net/meetups?retryWrites=true&w=majority`\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  // Call .find().toArray() on meetupsCollection to get all meetups\n  // within an array\n  const meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n\n  console.log(\"meetup: \", meetup);\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        image: meetup.image,\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description,\n      },\n    },\n  };\n\n  // return {\n  //   props: {\n  //     meetupData: {\n  //       image:\n  //         \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  //       id: meetupId,\n  //       title: \"First Meetup\",\n  //       address: \"Some Street 5, Some City\",\n  //       description: \"This is a first meetup\",\n  //     },\n  //   },\n  // };\n};\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}